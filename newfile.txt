using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;

public class FhirBundleConverter : JsonConverter<Bundle>
{
    public override bool CanConvert(Type objectType)
    {
        return objectType == typeof(Bundle);
    }

    public override Bundle Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        // Check if the current token is the start of an object
        if (reader.TokenType != JsonTokenType.StartObject)
        {
            throw new JsonException("Invalid FHIR Bundle JSON format. Expected start of object.");
        }

        // Create a new FHIR Bundle
        var bundle = new Bundle();

        // Read properties of the Bundle
        while (reader.Read())
        {
            if (reader.TokenType == JsonTokenType.EndObject)
            {
                return bundle;
            }

            if (reader.TokenType != JsonTokenType.PropertyName)
            {
                throw new JsonException("Invalid FHIR Bundle JSON format. Expected property name.");
            }

            string propertyName = reader.GetString();

            switch (propertyName)
            {
                case "resourceType":
                    bundle.ResourceType = reader.GetString();
                    break;
                case "type":
                    bundle.Type = (Bundle.BundleType)Enum.Parse(typeof(Bundle.BundleType), reader.GetString());
                    break;
                // Add more cases for other properties of the Bundle class as needed
                default:
                    reader.Skip();
                    break;
            }
        }

        throw new JsonException("Invalid FHIR Bundle JSON format. Unexpected end of JSON.");
    }

    public override void Write(Utf8JsonWriter writer, Bundle value, JsonSerializerOptions options)
    {
        // Write properties of the Bundle to the JSON writer
        writer.WriteStartObject();

        // Write resourceType property
        writer.WritePropertyName("resourceType");
        writer.WriteStringValue(value.ResourceType);

        // Write type property
        writer.WritePropertyName("type");
        writer.WriteStringValue(value.Type.ToString());

        // Add more lines to write other properties of the Bundle class

        writer.WriteEndObject();
    }
}
