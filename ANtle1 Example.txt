 public override void EnterLibraryDefinition(CqlGrammarParser.LibraryDefinitionContext context)
    {
        string libraryName = context.qualifiedIdentifier().GetText();
        string libraryVersion = context.versionSpecifier()?.GetText() ?? "'1.0.0'";
        elmCode.AppendLine($"library {libraryName} version {libraryVersion}");
    }

    public override void EnterParameterDefinition(CqlGrammarParser.ParameterDefinitionContext context)
    {
        string parameterName = context.identifier().GetText();
        string parameterType = context.typeSpecifier().GetText();
        elmCode.AppendLine($"parameter \"{parameterName}\" {parameterType}");
    }

    public override void EnterUsingDefinition(CqlGrammarParser.UsingDefinitionContext context)
    {
        string modelName = context.modelIdentifier().GetText();
        string versionSpecifier = context.versionSpecifier()?.GetText() ?? "'1.0.0'";
        elmCode.AppendLine($"using {modelName} version {versionSpecifier}");
    }

    public override void EnterIncludeDefinition(CqlGrammarParser.IncludeDefinitionContext context)
    {
        string libraryName = context.qualifiedIdentifier().GetText();
        string versionSpecifier = context.versionSpecifier()?.GetText() ?? "'1.0.0'";
        string alias = context.localIdentifier()?.GetText();
        if (alias != null)
        {
            elmCode.AppendLine($"include {libraryName} version {versionSpecifier} called {alias}");
        }
        else
        {
            elmCode.AppendLine($"include {libraryName} version {versionSpecifier}");
        }
    }

    public override void EnterCodeSystemDefinition(CqlGrammarParser.CodeSystemDefinitionContext context)
    {
        string codeSystemName = context.identifier().GetText();
        string codeSystemId = context.STRING().GetText();
        string versionSpecifier = context.versionSpecifier()?.GetText() ?? "'1.0.0'";
        elmCode.AppendLine($"codesystem {codeSystemName} : {codeSystemId} version {versionSpecifier}");
    }

    public override void EnterValueSetDefinition(CqlGrammarParser.ValueSetDefinitionContext context)
    {
        string valueSetName = context.identifier().GetText();
        string valueSetId = context.STRING().GetText();
        string versionSpecifier = context.versionSpecifier()?.GetText() ?? "'1.0.0'";
        string codeSystems = context.codesystems()?.GetText() ?? "";
        elmCode.AppendLine($"valueset {valueSetName} : {valueSetId} version {versionSpecifier} {codeSystems}");
    }

    public override void EnterCodeDefinition(CqlGrammarParser.CodeDefinitionContext context)
    {
        string codeName = context.identifier().GetText();
        string codeId = context.STRING().GetText();
        string codeSystem = context.codesystemIdentifier().GetText();
        string display = context.displayClause()?.GetText() ?? "";
        elmCode.AppendLine($"code {codeName} : {codeId} from {codeSystem} {display}");
    }

    public override void EnterConceptDefinition(CqlGrammarParser.ConceptDefinitionContext context)
    {
        string conceptName = context.identifier().GetText();
        string codes = string.Join(", ", context.codeIdentifier().Select(c => c.GetText()));
        string display = context.displayClause()?.GetText() ?? "";
        elmCode.AppendLine($"concept {conceptName} : {{ {codes} }} {display}");
    }

    public override void EnterExpressionDefinition(CqlGrammarParser.ExpressionDefinitionContext context)
    {
        string expressionName = context.identifier().GetText();
        string expression = context.expression().GetText();
        elmCode.AppendLine($"define \"{expressionName}\": {expression}");
    }

    public override void EnterContextDefinition(CqlGrammarParser.ContextDefinitionContext context)
    {
        string modelName = context.modelIdentifier()?.GetText() ?? "";
        string contextName = context.identifier().GetText();
        elmCode.AppendLine($"context {modelName}.{contextName}");
    }

    public override void EnterFunctionDefinition(CqlGrammarParser.FunctionDefinitionContext context)
    {
        string functionName = context.identifierOrFunctionIdentifier().GetText();
        string returnType = context.typeSpecifier()?.GetText() ?? "Any";
        string parameters = string.Join(", ", context.operandDefinition().Select(p => $"{p.identifier().GetText()} : {p.typeSpecifier().GetText()}"));
        string functionBody = context.functionBody()?.GetText() ?? "external";
        elmCode.AppendLine($"define function {functionName}({parameters}) returns {returnType}: {functionBody}");
    }
